#!/bin/bash

# Banner

function banner {
cat << EOF

██╗    ██╗███████╗██████╗ ██████╗ ██████╗ 
██║    ██║██╔════╝██╔══██╗██╔══██╗██╔══██╗
██║ █╗ ██║█████╗  ██████╔╝██████╔╝██████╔╝
██║███╗██║██╔══╝  ██╔══██╗██╔══██╗██╔═══╝ 
╚███╔███╔╝███████╗██████╔╝██████╔╝██║     
 ╚══╝╚══╝ ╚══════╝╚═════╝ ╚═════╝ ╚═╝  
                                -useraid


Welcome to WebBP.     

For options and flags use -h or --help.
EOF
}

# Selection Flags

main() {
  while [ $# -gt 0 ]; do
    case $1 in
      -h|--help)
        banner
        help
        exit
        ;;
      -m|--mern)
        app=$2
        docker
        mern
        exit
        ;;
      -l|--lamp)
        app=$2
        docker
        lamp
        exit
        ;;
      -c|--html)
        app=$2
        docker
        html
        exit
        ;;
      -p|--portainer)
        docker
        dockerdash
        exit
        ;;
      *)
        echo "Unknown option $1"
        banner
        help
        exit 1
        ;;
    esac
  done
}

# Help Function

function help {
cat <<EOF

This program generates a Boilerplate template for your web applications and deploys the
services as docker containers.
    WARNING: Some of the functionality in this program requires root privileges. Use at
your own risk.

    usage:   

        webbp [--flag] <app-name>

    options:

        -h|--help                Display all options and flags. 

        -l|--lamp                LAMP Stack

        -m|--mern                MERN Stack

        -p|--portainer           Deploy Portainer

        -c|--html                HTML,CSS,JS


EOF
}

# Variables

SUUSER=$USER
TIMEZONE=$(cat /etc/timezone)
SQLRPASS="rootpwd"
SQLUSER="user"
SQLPASS="password"
SQLDB="newdb"

# Docker Installation Check

function docker {
  echo "Checking Dependencies"
  # Curl
  if ! command -v curl &> /dev/null
  then
      echo "Installing Curl"
      sudo apt-get -y install curl
  fi
  # Docker
  if ! command -v docker &> /dev/null
  then
      echo "Installing Docker"
      curl -sSL https://get.docker.com/ | sh
      sudo usermod -aG docker $USER
      newgrp docker
      sudo apt-get -y install docker-compose
  fi
}

# Docker Dashboard

function dockerdash {
  # Deploying Portainer
  docker volume create portainer_data
  docker run -d \
  --name portainer \
  -p 9000:9000 \
  -p 9443:9443 \
  -v /var/run/docker.sock:/var/run/docker.sock \
  -v portainer_data:/data \
  --restart=always \
  portainer/portainer-ce:latest
}

# LAMP Stack

function lamp {
  mkdir -p $HOME/$app/webroot
  touch $HOME/$app/docker-compose.yml
  cat << EOF >> $HOME/$app/docker-compose.yml
version: '3.7'

services:
    php-httpd:
        image: php:apache
        ports:
            - 80:80
        volumes:
            - "./webroot:/var/www/html"

    mariadb:
        image: mariadb:latest
        volumes:
            - mariadb-volume:/var/lib/mysql
        environment:
            TZ: "$TIMEZONE"
            MYSQL_ALLOW_EMPTY_PASSWORD: "no"
            MYSQL_ROOT_PASSWORD: "$SQLRPASS"
            MYSQL_USER: "$SQLUSER"
            MYSQL_PASSWORD: "$SQLPASS"
            MYSQL_DATABASE: "$SQLDB"

    phpmyadmin:
        image: phpmyadmin/phpmyadmin
        links:
            - 'mariadb:db'
        ports:
            - 8081:80

volumes:
    mariadb-volume:

EOF

  echo "<?php phpinfo();" > $HOME/$app/webroot/index.php
  docker-compose -f /home/$USER/$app/docker-compose.yml up -d
  echo "The Stack is deployed on localhost"
}

# MERN Stack

function mern {
  mkdir $HOME/$app/node-backend/
  touch $HOME/$app/docker-compose.yml
  mkdir $HOME/$app/react-frontend/
  touch $HOME/$app/node-backend/Dockerfile
  touch $HOME/$app/react-frontend/Dockerfile

cat << EOF >> $HOME/$app/node-backend/Dockerfile
FROM node:latest
RUN mkdir -p /usr/src/app
WORKDIR /usr/src/app

RUN npm install -g nodemon

EXPOSE 3000
CMD [ "npm", "start" ]
EOF

cat << EOF >> $HOME/$app/react-frontend/Dockerfile
FROM node:latest
RUN mkdir -p /usr/src/app
WORKDIR /usr/src/app

EXPOSE 3000
CMD [ "npm", "start" ]
EOF

cat << EOF >> $HOME/$app/docker-compose.yml
version: '2'
services:
  mongodb:
    image: "mongo"
    ports:
     - "27017:27017"
  backend:
    build: ./node-backend/
    ports:
      - "6200:6200"
    volumes:
      - ./node-backend:/usr/src/app
    depends_on:
      - mongodb
  frontend:
    build: ./react-frontend/
    ports:
      - "3000:3000"
    volumes:
      - ./react-frontend:/usr/src/app
    depends_on:
      - backend
EOF

  docker-compose -f /home/$USER/$app/docker-compose.yml up -d

}

function html {
  mkdir $HOME/$app/
  touch $HOME/$app/index.html $HOME/$app/index.js $HOME/$app/style.css

cat << EOF >> $HOME/$app/index.html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>HTML 5</title>
    <link rel="stylesheet" href="style.css">
  </head>
  <body>
	<script src="index.js"></script>
  </body>
</html>
EOF

# Running in container

docker run -dit \
--name $app \
-p 8080:80 \
-v $HOME/$app/:/usr/local/apache2/htdocs/ \
httpd:latest

}

main "$@"; exit